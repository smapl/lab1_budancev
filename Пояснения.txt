compute_cost(X, y, np.array([0, 0])) - Значение функции стоимости при theta = [0, 0]: 
X.shape[0] - длина столбца 
X.shape[1] - количество столбцов 


compute_cost = 1 / (2 * m) * sum((compute_hypothesis(X, theta) - y) ** 2)

где:
X = np массив исходных данных (первый столбец)
y = np массив исходных данных (второй столбей столбец)
theta = np.array([0, 0]) - numpy массив состоящие из двух нулей







compute_hypothesis - функция модели (лмнейная функция)

compute_cost - функция стоимости, нужна для оценки насколько наша модель в конкретнйой точки отличается от фактических значений (из модели вычитается фактическое значение, в квадрат возносится чтобы было положительное значение)
чем значение меньше тем лучше


gradient_descend - градиентный спуск 

scale_features - стандартизация признаков (чтобы оптимизация правильно работает) (фотки кирилла 2 и 5 скрин)

normal_equation - нормальное уравнение (фотки кирилла 6 скрин)

history - вывод функции градиентного спуска